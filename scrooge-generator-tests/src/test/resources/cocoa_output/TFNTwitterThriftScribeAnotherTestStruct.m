/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
#import <Foundation/Foundation.h>

#import "ApacheThrift/TApplicationException.h"
#import "ApacheThrift/TBase.h"
#import "ApacheThrift/TObjective-C.h"
#import "ApacheThrift/TProcessor.h"
#import "ApacheThrift/TProtocol.h"
#import "ApacheThrift/TProtocolException.h"
#import "ApacheThrift/TProtocolUtil.h"
#import "TFNTwitterThriftScribeAnotherTestStruct.h"

@implementation TFNTwitterThriftScribeAnotherTestStruct

- (NSString*)description
{
    NSMutableString* ms = [NSMutableString stringWithString:@"TFNTwitterThriftScribeAnotherTestStruct( "];
    [ms appendString:@"structs:"];
    [ms appendFormat:@"%@ ", _structs];
    [ms appendString:@"stringStructs:"];
    [ms appendFormat:@"%@ ", _stringStructs];
    [ms appendString:@"aSet:"];
    [ms appendFormat:@"%@ ", _aSet];
    [ms appendString:@"aMap:"];
    [ms appendFormat:@"%@ ", _aMap];
    [ms appendString:@"id_:"];
    [ms appendFormat:@"%@ ", @(_id_)];
    [ms appendString:@"protocol_:"];
    [ms appendFormat:@"%@ ", _protocol_];
    [ms appendString:@"sel_:"];
    [ms appendFormat:@"%@ ", _sel_];
    [ms appendString:@"notACamel:"];
    [ms appendFormat:@"%@ ", @(_notACamel)];
    [ms appendString:@"anEnum:"];
    [ms appendFormat:@"%@ ", @(_anEnum)];
    [ms appendString:@")"];
    return [NSString stringWithString:ms];
}

- (instancetype)initWithStructs:(NSArray *)structs stringStructs:(NSArray *)stringStructs aSet:(NSSet *)aSet aMap:(NSDictionary *)aMap id_:(int32_t)id_ protocol_:(NSString *)protocol_ sel_:(TFNTwitterThriftScribeTestStruct*)sel_ notACamel:(int32_t)notACamel anEnum:(TFNTwitterThriftScribeTestEnum)anEnum
{
    if (self = [super init]) {
        [self setStructs:structs];
        [self setStringStructs:stringStructs];
        [self setASet:aSet];
        [self setAMap:aMap];
        [self setId_:id_];
        [self setProtocol_:protocol_];
        [self setSel_:sel_];
        [self setNotACamel:notACamel];
        [self setAnEnum:anEnum];
    }

    return self;
}

- (instancetype)initWithCoder:(NSCoder*)decoder
{
    if (self = [super init]) {
        if ([decoder containsValueForKey:@"1"]) {
            [self setStructs:[decoder decodeObjectForKey:@"1"]];
        }
        if ([decoder containsValueForKey:@"2"]) {
            [self setStringStructs:[decoder decodeObjectForKey:@"2"]];
        }
        if ([decoder containsValueForKey:@"3"]) {
            [self setASet:[decoder decodeObjectForKey:@"3"]];
        }
        if ([decoder containsValueForKey:@"4"]) {
            [self setAMap:[decoder decodeObjectForKey:@"4"]];
        }
        if ([decoder containsValueForKey:@"5"]) {
            [self setId_:[decoder decodeInt32ForKey:@"5"]];
        }
        if ([decoder containsValueForKey:@"6"]) {
            [self setProtocol_:[decoder decodeObjectForKey:@"6"]];
        }
        if ([decoder containsValueForKey:@"7"]) {
            [self setSel_:[decoder decodeObjectForKey:@"7"]];
        }
        if ([decoder containsValueForKey:@"8"]) {
            [self setNotACamel:[decoder decodeInt32ForKey:@"8"]];
        }
        if ([decoder containsValueForKey:@"9"]) {
            [self setAnEnum:[decoder decodeInt32ForKey:@"9"]];
        }
    }
    return self;
}

- (void)encodeWithCoder:(NSCoder*)encoder
{
    if (_structsIsSet) {
        [encoder encodeObject:_structs forKey:@"1"];
    }
    if (_stringStructsIsSet) {
        [encoder encodeObject:_stringStructs forKey:@"2"];
    }
    if (_aSetIsSet) {
        [encoder encodeObject:_aSet forKey:@"3"];
    }
    if (_aMapIsSet) {
        [encoder encodeObject:_aMap forKey:@"4"];
    }
    if (_id_IsSet) {
        [encoder encodeInt32:_id_ forKey:@"5"];
    }
    if (_protocol_IsSet) {
        [encoder encodeObject:_protocol_ forKey:@"6"];
    }
    if (_sel_IsSet) {
        [encoder encodeObject:_sel_ forKey:@"7"];
    }
    if (_notACamelIsSet) {
        [encoder encodeInt32:_notACamel forKey:@"8"];
    }
    if (_anEnumIsSet) {
        [encoder encodeInt32:_anEnum forKey:@"9"];
    }
}

- (void)setStructs:(NSArray *)structs
{
    _structs = [structs copy];
    _structsIsSet = YES;
}

- (void)setStringStructs:(NSArray *)stringStructs
{
    _stringStructs = [stringStructs copy];
    _stringStructsIsSet = YES;
}

- (void)setASet:(NSSet *)aSet
{
    _aSet = [aSet copy];
    _aSetIsSet = YES;
}

- (void)setAMap:(NSDictionary *)aMap
{
    _aMap = [aMap copy];
    _aMapIsSet = YES;
}

- (void)setId_:(int32_t)id_
{
    _id_ = id_;
    _id_IsSet = YES;
}

- (void)setProtocol_:(NSString *)protocol_
{
    _protocol_ = [protocol_ copy];
    _protocol_IsSet = YES;
}

- (void)setSel_:(TFNTwitterThriftScribeTestStruct *)sel_
{
    _sel_ = sel_;
    _sel_IsSet = YES;
}

- (void)setNotACamel:(int32_t)notACamel
{
    _notACamel = notACamel;
    _notACamelIsSet = YES;
}

- (void)setAnEnum:(TFNTwitterThriftScribeTestEnum)anEnum
{
    _anEnum = anEnum;
    _anEnumIsSet = YES;
}

- (void)read:(id <TProtocol>)inProtocol
{
    NSString* fieldName;
    int fieldType;
    int fieldID;

    [inProtocol readStructBeginReturningName:nil];
    while (true) {
        [inProtocol readFieldBeginReturningName:&fieldName type:&fieldType fieldID:&fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID) {
            case 1:
                if (fieldType == TType_LIST) {
                    NSArray * structs_item;
                    int _structs_item_size;
                    [inProtocol readListBeginReturningElementType:NULL size:&_structs_item_size];
                    NSMutableArray *structs_item_mutable = [[NSMutableArray alloc] initWithCapacity:_structs_item_size];
                    for (int _structs_item_i = 0; _structs_item_i < _structs_item_size; ++_structs_item_i) {
                        TFNTwitterThriftScribeTestStruct * structs_item_element;
                        structs_item_element = [[TFNTwitterThriftScribeTestStruct alloc] init];
                        [structs_item_element read:inProtocol];
                        [structs_item_mutable addObject: structs_item_element];
                    }
                    structs_item = structs_item_mutable;
                    [inProtocol readListEnd];
                    [self setStructs:structs_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_LIST) {
                    NSArray * stringStructs_item;
                    int _stringStructs_item_size;
                    [inProtocol readListBeginReturningElementType:NULL size:&_stringStructs_item_size];
                    NSMutableArray *stringStructs_item_mutable = [[NSMutableArray alloc] initWithCapacity:_stringStructs_item_size];
                    for (int _stringStructs_item_i = 0; _stringStructs_item_i < _stringStructs_item_size; ++_stringStructs_item_i) {
                        NSString * stringStructs_item_element;
                        stringStructs_item_element = [inProtocol readString];
                        [stringStructs_item_mutable addObject: stringStructs_item_element];
                    }
                    stringStructs_item = stringStructs_item_mutable;
                    [inProtocol readListEnd];
                    [self setStringStructs:stringStructs_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 3:
                if (fieldType == TType_SET) {
                    NSSet * aSet_item;
                    int _aSet_item_size;
                    [inProtocol readSetBeginReturningElementType: NULL size: &_aSet_item_size];
                    NSMutableSet *aSet_item_mutable = [[NSMutableSet alloc] initWithCapacity:_aSet_item_size];
                    for (int _aSet_item_i = 0; _aSet_item_i < _aSet_item_size; ++_aSet_item_i) {
                        TFNTwitterThriftScribeTestStruct * aSet_item_element;
                        aSet_item_element = [[TFNTwitterThriftScribeTestStruct alloc] init];
                        [aSet_item_element read:inProtocol];
                        [aSet_item_mutable addObject: aSet_item_element];
                    }
                    aSet_item = aSet_item_mutable;
                    [inProtocol readSetEnd];
                    [self setASet:aSet_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 4:
                if (fieldType == TType_MAP) {
                    NSDictionary * aMap_item;
                    int _aMap_item_size;
                    [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_aMap_item_size];
                    NSMutableDictionary *aMap_item_mutable = [[NSMutableDictionary alloc] initWithCapacity: _aMap_item_size];
                    for (int _aMap_item_i = 0; _aMap_item_i < _aMap_item_size; ++_aMap_item_i) {
                        NSString * aMap_item_key;
                        TFNTwitterThriftScribeTestStruct * aMap_item_value;
                        aMap_item_key = [inProtocol readString];
                        aMap_item_value = [[TFNTwitterThriftScribeTestStruct alloc] init];
                        [aMap_item_value read:inProtocol];
                        [aMap_item_mutable setObject:aMap_item_value forKey:aMap_item_key];
                    }
                    aMap_item = aMap_item_mutable;
                    [inProtocol readMapEnd];
                    [self setAMap:aMap_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 5:
                if (fieldType == TType_I32) {
                    int32_t id_item;
                    id_item = [inProtocol readI32];
                    [self setId_:id_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 6:
                if (fieldType == TType_STRING) {
                    NSString * protocol_item;
                    protocol_item = [inProtocol readString];
                    [self setProtocol_:protocol_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 7:
                if (fieldType == TType_STRUCT) {
                    TFNTwitterThriftScribeTestStruct* sel_item;
                    sel_item = [[TFNTwitterThriftScribeTestStruct alloc] init];
                    [sel_item read:inProtocol];
                    [self setSel_:sel_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 8:
                if (fieldType == TType_I32) {
                    int32_t notACamel_item;
                    notACamel_item = [inProtocol readI32];
                    [self setNotACamel:notACamel_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 9:
                if (fieldType == TType_I32) {
                    TFNTwitterThriftScribeTestEnum anEnum_item;
                    anEnum_item = [inProtocol readI32];
                    [self setAnEnum:anEnum_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
        default:
            NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
            [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
            break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
    [self validate];
}

- (void)write:(id <TProtocol>)outProtocol
{
    [self validate];
    [outProtocol writeStructBeginWithName:@"TFNTwitterThriftScribeAnotherTestStruct"];
    if (_structsIsSet) {
        [outProtocol writeFieldBeginWithName:@"structs" type:TType_LIST fieldID:1];
        NSArray * structs_item = _structs;
        [outProtocol writeListBeginWithElementType:TType_STRUCT size:(int)[structs_item count]];
        for (int _structs_item_i = 0; _structs_item_i < [structs_item count]; _structs_item_i++) {
            TFNTwitterThriftScribeTestStruct * structs_item_element = structs_item[_structs_item_i];
            [structs_item_element write: outProtocol];
        }
        [outProtocol writeListEnd];
        [outProtocol writeFieldEnd];
    }
    if (_stringStructsIsSet) {
        [outProtocol writeFieldBeginWithName:@"stringStructs" type:TType_LIST fieldID:2];
        NSArray * stringStructs_item = _stringStructs;
        [outProtocol writeListBeginWithElementType:TType_STRING size:(int)[stringStructs_item count]];
        for (int _stringStructs_item_i = 0; _stringStructs_item_i < [stringStructs_item count]; _stringStructs_item_i++) {
            NSString * stringStructs_item_element = stringStructs_item[_stringStructs_item_i];
            [outProtocol writeString:stringStructs_item_element];
        }
        [outProtocol writeListEnd];
        [outProtocol writeFieldEnd];
    }
    if (_aSetIsSet) {
        [outProtocol writeFieldBeginWithName:@"aSet" type:TType_SET fieldID:3];
        NSSet * aSet_item = _aSet;
        [outProtocol writeSetBeginWithElementType:TType_STRUCT size:(int)[aSet_item count]];
        for (id aSet_item_element in aSet_item) {
            [aSet_item_element write: outProtocol];
        }
        [outProtocol writeSetEnd];
        [outProtocol writeFieldEnd];
    }
    if (_aMapIsSet) {
        [outProtocol writeFieldBeginWithName:@"aMap" type:TType_MAP fieldID:4];
        NSDictionary * aMap_item = _aMap;
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRUCT size: (int)[aMap_item count]];
        for (id aMap_item_key_id in aMap_item) {
            NSString * aMap_item_key;
            TFNTwitterThriftScribeTestStruct * aMap_item_value;
            id aMap_item_value_id = [aMap_item objectForKey:aMap_item_key_id];
            aMap_item_key = aMap_item_key_id;
            aMap_item_value = aMap_item_value_id;
            [outProtocol writeString:aMap_item_key];
            [aMap_item_value write: outProtocol];
        }
        [outProtocol writeMapEnd];
        [outProtocol writeFieldEnd];
    }
    if (_id_IsSet) {
        [outProtocol writeFieldBeginWithName:@"id" type:TType_I32 fieldID:5];
        int32_t id_item = _id_;
        [outProtocol writeI32:id_item];
        [outProtocol writeFieldEnd];
    }
    if (_protocol_IsSet) {
        [outProtocol writeFieldBeginWithName:@"protocol" type:TType_STRING fieldID:6];
        NSString * protocol_item = _protocol_;
        [outProtocol writeString:protocol_item];
        [outProtocol writeFieldEnd];
    }
    if (_sel_IsSet) {
        [outProtocol writeFieldBeginWithName:@"SEL" type:TType_STRUCT fieldID:7];
        TFNTwitterThriftScribeTestStruct* sel_item = _sel_;
        [sel_item write: outProtocol];
        [outProtocol writeFieldEnd];
    }
    if (_notACamelIsSet) {
        [outProtocol writeFieldBeginWithName:@"not_a_camel" type:TType_I32 fieldID:8];
        int32_t notACamel_item = _notACamel;
        [outProtocol writeI32:notACamel_item];
        [outProtocol writeFieldEnd];
    }
    if (_anEnumIsSet) {
        [outProtocol writeFieldBeginWithName:@"anEnum" type:TType_I32 fieldID:9];
        TFNTwitterThriftScribeTestEnum anEnum_item = _anEnum;
        [outProtocol writeI32:anEnum_item];
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (void)validate
{
}

@end
